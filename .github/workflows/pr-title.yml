# name: PR Title Checker

# on:
#   pull_request:
#     types: [opened, edited, reopened, synchronize]

# jobs:
#   validate-title:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check PR Title Format
#         uses: actions/github-script@v6
#         with:
#           script: |
#             const title = context.payload.pull_request.title.trim();
            
#             // Define valid patterns
#             const validPatterns = [
#               // Pattern 1: (type) O3-XXXX: Description
#               /^\((docs|test|chore|fix|feat|refactor)\)\s+(O3-\d+):\s+.+$/,
#               // Pattern 2: (type) Description (no ticket)
#               /^\((docs|test|chore|fix|feat|refactor)\)\s+[^ ].+$/,
#               // Pattern 3: (BREAKING) O3-XXXX: Description
#               /^\(BREAKING\)\s+(O3-\d+):\s+.+$/,
#               // Pattern 4: BREAKING: Description (no ticket)
#               /^BREAKING:\s+[^ ].+$/
#             ];

#             // Check if title matches any valid pattern
#             const isValid = validPatterns.some(pattern => pattern.test(title));
            
#             if (!isValid) {
#               let errorMessage = `üö´ Invalid PR title format. Strict requirements:\n\n`;
              
#               // Check for common mistakes
#               if (/^BREAKING\s/i.test(title)) {
#                 errorMessage += `‚Ä¢ For BREAKING changes with ticket numbers, use "(BREAKING) O3-1234: Description"\n`;
#                 errorMessage += `‚Ä¢ For BREAKING changes without ticket numbers, use "BREAKING: Description"\n`;
#               } else if (/^\([^)]+\)\s+O3-\d+[^:]/.test(title)) {
#                 errorMessage += `‚Ä¢ Ticket reference must be followed by a colon (O3-1234: Description)\n`;
#               } else if (/^[^(](docs|test|chore|fix|feat|refactor)/i.test(title)) {
#                 errorMessage += `‚Ä¢ Type prefix must be in parentheses (e.g., "(feat)")\n`;
#               } else if (/^\([^)]+\):/.test(title)) {
#                 errorMessage += `‚Ä¢ No colon should appear immediately after parenthesized type\n`;
#               } else {
#                 errorMessage += `‚Ä¢ Must follow one of these exact patterns:\n\n`;
#                 errorMessage += `With ticket reference:\n`;
#                 errorMessage += `- "(feat) O3-1234: Description"\n`;
#                 errorMessage += `- "(BREAKING) O3-1234: Description"\n\n`;
#                 errorMessage += `Without ticket reference:\n`;
#                 errorMessage += `- "(feat) Description"\n`;
#                 errorMessage += `- "BREAKING: Description"\n\n`;
#               }
              
#               errorMessage += `üîç Found these issues in your title: "${title}"\n\n`;
#               errorMessage += `üí° Examples of valid titles:\n`;
#               errorMessage += `‚Ä¢ "(fix) O3-4567: Resolve header alignment issue"\n`;
#               errorMessage += `‚Ä¢ "(chore) Update dependency packages"\n`;
#               errorMessage += `‚Ä¢ "(BREAKING) O3-3191: Move LeftNav into primary navigation app"\n`;
#               errorMessage += `‚Ä¢ "BREAKING: Remove deprecated API endpoints"`;
              
#               core.setFailed(errorMessage);
#             }

#             // Additional strict validation checks
#             // 1. Validate BREAKING change format
#             if (/BREAKING/i.test(title)) {
#               if (title.includes('O3-')) {
#                 if (!/^\(BREAKING\)\s+O3-\d+:\s+.+$/.test(title)) {
#                   core.setFailed(`For BREAKING changes with tickets:\n` +
#                     `‚Ä¢ Must use parentheses: "(BREAKING) O3-1234: Description"\n` +
#                     `‚Ä¢ Your title: "${title}"`);
#                 }
#               } else {
#                 if (!/^BREAKING:\s+[^ ].+$/.test(title)) {
#                   core.setFailed(`For BREAKING changes without tickets:\n` +
#                     `‚Ä¢ Must use colon: "BREAKING: Description"\n` +
#                     `‚Ä¢ Must NOT use parentheses\n` +
#                     `‚Ä¢ Your title: "${title}"`);
#                 }
#               }
#             }
            
#             // 2. Check ticket reference format
#             const ticketMatch = title.match(/(o3|03|O3)-\d+/);
#             if (ticketMatch) {
#               const ticketRef = ticketMatch[0];
#               if (ticketRef.startsWith('o3')) {
#                 core.setFailed(`Invalid ticket reference:\n` +
#                   `‚Ä¢ Must use uppercase O (O3-1234)\n` +
#                   `‚Ä¢ Found lowercase: "${ticketRef}"`);
#               } else if (ticketRef.startsWith('03')) {
#                 core.setFailed(`Invalid ticket reference:\n` +
#                   `‚Ä¢ Must use letter O (O3-1234)\n` +
#                   `‚Ä¢ Found zero: "${ticketRef}"`);
#               } else if (!/:/.test(title.split(ticketRef)[1])) {
#                 core.setFailed(`Missing colon after ticket reference:\n` +
#                   `‚Ä¢ Must include colon: "O3-1234: Description"\n` +
#                   `‚Ä¢ Your title: "${title}"`);
#               }
#             }

# name: PR Title Checker

# on:
#   pull_request:
#     types: [opened, edited]

# jobs:
#   validate-title:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check PR Title Format
#         uses: actions/github-script@v6
#         with:
#           script: |
#             const title = context.payload.pull_request.title.trim();
            
#             // Validate type in parentheses if present
#             const typeInParentheses = title.match(/^\(([^)]+)\)/);
#             if (typeInParentheses) {
#               const validTypes = ['docs', 'test', 'chore', 'fix', 'feat'];
#               if (!validTypes.includes(typeInParentheses[1])) {
#                 core.setFailed(`Invalid type in parentheses. Valid types are: ${validTypes.join(', ')}`);
#               }
#             }

#             // Main pattern matching
#             const isValid = /^(?:\((docs|test|chore|fix|feat)\)|BREAKING:)\s(?:[A-Z][A-Z0-9]+-\d+:\s)?\S.+$/.test(title);
            
#             if (!isValid) {
#               let errorMessage = `üö´ Invalid PR title format. Requirements:\n\n`;
              
#               // Check for missing parentheses for non-BREAKING changes
#               if (/^(docs|test|chore|fix|feat)[:\s]/.test(title)) {
#                 errorMessage += `‚Ä¢ Type prefix must be in parentheses (e.g., "(feat)")\n`;
#               }
              
#               // Check for BREAKING format issues
#               if (/BREAKING/i.test(title)) {
#                 if (title.includes('(')) {
#                   errorMessage += `‚Ä¢ BREAKING changes should NOT use parentheses\n`;
#                 }
#                 if (!title.startsWith('BREAKING:')) {
#                   errorMessage += `‚Ä¢ BREAKING changes must use format: "BREAKING: Description"\n`;
#                 }
#               }
              
#               // Check for ticket number format issues
#               const ticketMatch = title.match(/(o3|03)-\d+/i);
#               if (ticketMatch) {
#                 errorMessage += `‚Ä¢ Ticket reference must use uppercase O (O3-1234), found: "${ticketMatch[0]}"\n`;
#               }
              
#               errorMessage += `\nüí° Examples of valid titles:\n`;
#               errorMessage += `‚Ä¢ "(feat) O3-1234: Description"\n`;
#               errorMessage += `‚Ä¢ "(chore) Description without ticket"\n`;
#               errorMessage += `‚Ä¢ "BREAKING: Description"\n`;
#               errorMessage += `‚Ä¢ "BREAKING: O3-1234: Description"\n`;
              
#               core.setFailed(errorMessage);
#             }

#             // Additional validation for ticket numbers
#             const ticketMatch = title.match(/(o3|03|O3)-\d+/i);
#             if (ticketMatch) {
#               const ticketRef = ticketMatch[0];
#               if (ticketRef.startsWith('o3')) {
#                 core.setFailed(`Invalid ticket reference: Must use uppercase O (O3-1234), found: "${ticketRef}"`);
#               } else if (ticketRef.startsWith('03')) {
#                 core.setFailed(`Invalid ticket reference: Must use letter O (O3-1234), found: "${ticketRef}"`);
#               } else if (ticketRef === 'O3-') {
#                 core.setFailed(`Invalid ticket reference: Must include numbers after O3-`);
#               } else if (title.includes(ticketRef) && !title.includes(`${ticketRef}:`)) {
#                 core.setFailed(`Missing colon after ticket reference: Must be "O3-1234: Description"`);
#               }
#             }

name: PR Title Checker

on:
  pull_request:
    types: [opened, edited]

jobs:
  validate-title:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR Title Format
        uses: actions/github-script@v6
        with:
          script: |
            const title = context.payload.pull_request.title.trim();
            const validTypes = ['docs', 'test', 'chore', 'fix', 'feat'];
            
            // 1. Check for invalid prefixes (o3 or 03) - must come first
            const invalidPrefix = title.match(/\b(o3|03)-\d+/i);
            if (invalidPrefix) {
              const foundPrefix = invalidPrefix[1];
              core.setFailed(`‚ùå Invalid ticket prefix "${foundPrefix}" detected.\n` +
                '‚Ä¢ Must use uppercase "O3-" (letter O, not zero)\n' +
                '‚Ä¢ Example valid format: "(fix) O3-1234: Description"');
              return;
            }

            // 2. Check for valid O3 tickets
            const o3Ticket = title.match(/\b(O3-\d+)/);
            if (o3Ticket) {
              const ticket = o3Ticket[1];
              
              // Check for missing colon
              if (!title.includes(`${ticket}:`)) {
                core.setFailed(`‚ùå Format error for ticket "${ticket}"\n` +
                  '‚Ä¢ Must include a colon after ticket number\n' +
                  `‚Ä¢ Correct format: "${ticket}: Description"\n` +
                  `‚Ä¢ Your title: "${title}"`);
                return;
              }
              
              // Check if ticket has numbers
              if (!/O3-\d+$/.test(ticket)) {
                core.setFailed(`‚ùå Invalid ticket number format\n` +
                  `‚Ä¢ Ticket must include numbers after O3-\n` +
                  `‚Ä¢ Example: "O3-1234: Description"`);
                return;
              }
            }

            // 3. Validate title structure
            const titlePattern = /^(?:\((docs|test|chore|fix|feat)\)|BREAKING:)\s(?:[^:]+:\s)?\S.+$/;
            if (!titlePattern.test(title)) {
              let errorMsg = '‚ùå Invalid PR title structure\n\n';
              
              if (!/^(\(|BREAKING:)/.test(title)) {
                errorMsg += '‚Ä¢ Must start with "(type)" or "BREAKING:"\n';
              }
              else if (/^\([^)]+\)\s*$/.test(title)) {
                errorMsg += '‚Ä¢ Missing description after type\n';
              }
              else if (/^BREAKING[^:]/.test(title)) {
                errorMsg += '‚Ä¢ Must use format: "BREAKING: Description"\n';
              }
              
              core.setFailed(errorMsg + '\nüí° Valid examples:\n' +
                '‚Ä¢ "(feat) O3-123: New feature"\n' +
                '‚Ä¢ "(fix) General bug fix"\n' +
                '‚Ä¢ "BREAKING: Major change"\n' +
                '‚Ä¢ "BREAKING: O3-456: Breaking change"');
              return;
            }

            // 4. Validate type in parentheses
            const typeMatch = title.match(/^\(([^)]+)\)/);
            if (typeMatch && !validTypes.includes(typeMatch[1])) {
              core.setFailed(`‚ùå Invalid type "${typeMatch[1]}"\n` +
                `‚Ä¢ Valid types: ${validTypes.join(', ')}\n` +
                '‚Ä¢ Example: "(fix) Description"');
              return;
            }

            // 5. Validate BREAKING format
            if (/^BREAKING:/i.test(title)) {
              if (title.match(/^\(/)) {
                core.setFailed('‚ùå BREAKING change format error\n' +
                  '‚Ä¢ Must NOT use parentheses\n' +
                  '‚Ä¢ Correct format: "BREAKING: Description"');
                return;
              }
              
              if (!/^BREAKING:\s/.test(title)) {
                core.setFailed('‚ùå BREAKING change format error\n' +
                  '‚Ä¢ Must include space after colon\n' +
                  '‚Ä¢ Example: "BREAKING: Description"');
                return;
              }
            }

            // All checks passed
            core.info('‚úÖ PR title format is valid');
